package main;

public class InputManager {
	
	static String manage(String input) {
		
		final String result;
		
		final String operation= input.split("\\s+")[0].toLowerCase();
		final String argumentOne= input.split("\\s+")[1];
		
		final ManageOneArgument manageOne;		
		
		
		if (operation.equalsIgnoreCase("UpperCase")) {
			manageOne = new ManageOneArgument(new simpleModifier.UpperCase(), argumentOne);
			result = manageOne.startCalculating();
			return result;
		}
		
		if (operation.equalsIgnoreCase("Lowercase")) {
			manageOne = new ManageOneArgument(new simpleModifier.LowerCase(), argumentOne);
			result = manageOne.startCalculating();
			return result;
		}
		
		if (operation.equalsIgnoreCase("RandomNumber")) {
			manageOne = new ManageOneArgument(new randomGenerator.RandomNumber(), argumentOne);
			result = manageOne.startCalculating();
			return result;
		}
		
		if (operation.equalsIgnoreCase("MD5")) {
			manageOne = new ManageOneArgument(new hashFunction.MD5(), argumentOne);
			result = manageOne.startCalculating();
			return result;
		}
		
		if (operation.equalsIgnoreCase("CountSymbols")) {
			manageOne = new ManageOneArgument(new statistics.CountSymbols(), argumentOne);
			result = manageOne.startCalculating();
			return result;
		}
		
		if (operation.equalsIgnoreCase("ROT13")) {
			manageOne = new ManageOneArgument(new simpleModifier.ROT13(), argumentOne);
			result = manageOne.startCalculating();
			return result;
		}
		
		if (operation.equalsIgnoreCase("AES")) {
			manageTwo = new ManageTwoArguments(new enDeCrypt.AES(), argumentOne, argumentTwo);
			result = manageTwo.startCalculating();
			return result;
		}
		
		if (operation.equalsIgnoreCase("SHA256")) {
			manageOne = new ManageOneArgument(new hashFunction.SHA256(), argumentOne);
			result = manageOne.startCalculating();
			return result;
		}
		
		if (operation.equalsIgnoreCase("DES")) {
			manageTwo = new ManageTwoArguments(new enDeCrypt.DES(), argumentOne, argumentTwo);
			result = manageTwo.startCalculating();
			return result;
		}
		
		if (operation.equalsIgnoreCase("LongComSub")) {
			manageTwo = new ManageTwoArguments(new statistics.LongComSub(), argumentOne,
					argumentTwo);
			result = manageTwo.startCalculating();
			return result;
		}
		
		if (operation.equalsIgnoreCase("Reverse")) {
			manageOne = new ManageOneArgument(new simpleModifier.Reverse(), argumentOne);
			result = manageOne.startCalculating();
			return result;
		}
		
		if (operation.equalsIgnoreCase("CountSymAppear")) {
			manageOne = new ManageOneArgument(new statistics.CountSymAppear(), argumentOne);
			result = manageOne.startCalculating();
			return result;
		}
		
		
		return original(input);
		
	}
	
}